#!/usr/bin/env bash

echo_br_bottom() {
  echo $1; echo
}

echo_br_top() {
  echo; echo $1
}

echo_br_both() {
  echo; echo $1; echo
}

echo_stage_status() {
  if [ "$1" -eq "0" ]; then
    echo_br_bottom "Starting $2 stage..."
  fi 

  if [ "$1" -eq "1" ]; then
    echo_br_bottom "$2 stage has finished!"
  fi 
}

fn_call() {
  for fn in "$@"; do
    echo_br_bottom "Function $fn has started..."
    $fn
    echo_br_bottom "Function $fn has finished!"
  done
}

# Credit: St√©phane Chazelas - https://unix.stackexchange.com/a/223000
read_pw() {
  REPLY="$(
    # always read from the tty even when redirected:
    exec < /dev/tty || exit # || exit only needed for bash

    # save current tty settings:
    tty_settings=$(stty -g) || exit

    # schedule restore of the settings on exit of that subshell
    # or on receiving SIGINT or SIGTERM:
    trap 'stty "$tty_settings"' EXIT INT TERM

    # disable terminal local echo
    stty -echo || exit

    # prompt on tty
    printf "Password: " > /dev/tty

    # read password as one line, record exit status
    IFS= read -r password; ret=$?

    # display a newline to visually acknowledge the entered password
    echo > /dev/tty

    # return the password for $REPLY
    printf '%s\n' "$password"
    exit "$ret"
  )"
}
